Step-by-step Forecast Process for Time-Series Data using Python and Scikit-learn:

1. Import necessary libraries:
```python
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
```

2. Load and preprocess the data:
```python
# Assuming the data is in a JSON file named 'power_data.json'
df = pd.read_json('power_data.json', lines=True)
df['day'] = pd.to_datetime(df['day'])
df = df.sort_values('day')
```

3. Feature engineering:
```python
df['dayofweek'] = df['day'].dt.dayofweek
df['month'] = df['day'].dt.month
df['year'] = df['day'].dt.year
```

4. Prepare the features and target variable:
```python
X = df[['dayofweek', 'month', 'year']]
y = df['sumPowerReading']
```

5. Split the data into training and testing sets:
```python
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
```

6. Create and train the Random Forest model:
```python
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
```

7. Make predictions on the test set:
```python
y_pred = rf_model.predict(X_test)
```

8. Evaluate the model:
```python
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print(f"Root Mean Squared Error: {rmse}")
```

9. Visualize the results:
```python
plt.figure(figsize=(12, 6))
plt.plot(y_test.index, y_test.values, label='Actual')
plt.plot(y_test.index, y_pred, label='Predicted')
plt.legend()
plt.title('Actual vs Predicted Power Readings')
plt.xlabel('Date')
plt.ylabel('Power Reading')
plt.show()
```

10. Generate future dates for forecasting:
```python
future_dates = pd.date_range(start=df['day'].max() + pd.Timedelta(days=1), periods=30)
future_X = pd.DataFrame({
    'dayofweek': future_dates.dayofweek,
    'month': future_dates.month,
    'year': future_dates.year
})
```

11. Make predictions for future dates:
```python
future_predictions = rf_model.predict(future_X)
```

12. Visualize the forecast:
```python
plt.figure(figsize=(12, 6))
plt.plot(df['day'], df['sumPowerReading'], label='Historical Data')
plt.plot(future_dates, future_predictions, label='Forecast')
plt.legend()
plt.title('Power Reading Forecast')
plt.xlabel('Date')
plt.ylabel('Power Reading')
plt.show()
```

13. Analyze feature importance:
```python
feature_importance = pd.DataFrame({
    'feature': X.columns,
    'importance': rf_model.feature_importances_
}).sort_values('importance', ascending=False)

print(feature_importance)
```

Understanding the forecasted values:
- The Random Forest model predicts future power readings based on the patterns it learned from historical data.
- The model considers the day of the week, month, and year as features to make predictions.
- The Root Mean Squared Error (RMSE) provides an indication of the model's accuracy. Lower RMSE values indicate better performance.

Factors driving the forecasted values:
- Analyze the feature importance output to understand which factors have the most significant impact on the predictions.
- The model may capture seasonal patterns (e.g., higher power consumption in summer months) and weekly patterns (e.g., different consumption on weekdays vs. weekends).
- Look for trends in the historical data and how they extend into the forecast.
- Consider external factors not included in the model (e.g., holidays, special events) that might affect power consumption.

To improve the forecast:
- Include additional relevant features (e.g., temperature, holidays).
- Try different algorithms or ensemble methods.
- Increase the amount of historical data used for training.
- Perform hyperparameter tuning to optimize the model's performance.